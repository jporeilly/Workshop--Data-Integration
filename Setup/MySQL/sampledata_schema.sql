-- MySQL Sample Database Schema
-- Created: 2025-05-22
-- Version: 1.0

-- Set SQL mode for better data integrity
SET SESSION sql_mode='NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO';

-- Check if database exists and drop it if it does
DROP DATABASE IF EXISTS sampledata;

-- Create database
CREATE DATABASE sampledata 
  CHARACTER SET utf8mb4 
  COLLATE utf8mb4_unicode_ci;

-- Create users
DROP USER IF EXISTS 'pentaho_user'@'%';
DROP USER IF EXISTS 'pentaho_admin'@'%';
DROP USER IF EXISTS 'reporting_user'@'%';

CREATE USER 'pentaho_user'@'%' IDENTIFIED BY 'password';
CREATE USER 'pentaho_admin'@'%' IDENTIFIED BY 'password';
CREATE USER 'reporting_user'@'%' IDENTIFIED BY 'reporting_pass';

-- Grant privileges
GRANT ALL PRIVILEGES ON sampledata.* TO 'pentaho_user'@'%';
GRANT ALL PRIVILEGES ON sampledata.* TO 'pentaho_admin'@'%';
GRANT SELECT ON sampledata.* TO 'reporting_user'@'%';
FLUSH PRIVILEGES;

-- Use the database
USE sampledata;

-- Create tables with proper character set and collation
CREATE TABLE OFFICES (
  OFFICECODE varchar(10) NOT NULL,
  CITY varchar(50) NOT NULL,
  PHONE varchar(50) NOT NULL,
  ADDRESSLINE1 varchar(50) NOT NULL,
  ADDRESSLINE2 varchar(50) DEFAULT NULL,
  STATE varchar(50) DEFAULT NULL,
  COUNTRY varchar(50) NOT NULL,
  POSTALCODE varchar(15) NOT NULL,
  TERRITORY varchar(10) NOT NULL,
  PRIMARY KEY (OFFICECODE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE EMPLOYEES (
  EMPLOYEENUMBER int NOT NULL,
  LASTNAME varchar(50) NOT NULL,
  FIRSTNAME varchar(50) NOT NULL,
  EXTENSION varchar(10) NOT NULL,
  EMAIL varchar(100) NOT NULL,
  OFFICECODE varchar(10) NOT NULL,
  REPORTSTO int DEFAULT NULL,
  JOBTITLE varchar(50) NOT NULL,
  PRIMARY KEY (EMPLOYEENUMBER),
  KEY IDX_OFFICECODE (OFFICECODE),
  KEY IDX_REPORTSTO (REPORTSTO),
  CONSTRAINT fk_employees_office 
    FOREIGN KEY (OFFICECODE) REFERENCES OFFICES (OFFICECODE),
  CONSTRAINT fk_employees_manager 
    FOREIGN KEY (REPORTSTO) REFERENCES EMPLOYEES (EMPLOYEENUMBER)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE CUSTOMERS (
  CUSTOMERNUMBER int NOT NULL,
  CUSTOMERNAME varchar(50) NOT NULL,
  CONTACTLASTNAME varchar(50) NOT NULL,
  CONTACTFIRSTNAME varchar(50) NOT NULL,
  PHONE varchar(50) NOT NULL,
  ADDRESSLINE1 varchar(50) NOT NULL,
  ADDRESSLINE2 varchar(50) DEFAULT NULL,
  CITY varchar(50) NOT NULL,
  STATE varchar(50) DEFAULT NULL,
  POSTALCODE varchar(15) DEFAULT NULL,
  COUNTRY varchar(50) NOT NULL,
  SALESREPEMPLOYEENUMBER int DEFAULT NULL,
  CREDITLIMIT decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (CUSTOMERNUMBER),
  KEY IDX_CUSTOMER_NAME (CUSTOMERNAME),
  KEY IDX_SALESREP (SALESREPEMPLOYEENUMBER),
  CONSTRAINT fk_customers_employee
    FOREIGN KEY (SALESREPEMPLOYEENUMBER) 
    REFERENCES EMPLOYEES (EMPLOYEENUMBER)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE PRODUCTS (
  PRODUCTCODE varchar(15) NOT NULL,
  PRODUCTNAME varchar(70) NOT NULL,
  PRODUCTLINE varchar(50) NOT NULL,
  PRODUCTSCALE varchar(10) NOT NULL,
  PRODUCTVENDOR varchar(50) NOT NULL,
  PRODUCTDESCRIPTION text NOT NULL,
  QUANTITYINSTOCK smallint NOT NULL DEFAULT '0',
  BUYPRICE decimal(10,2) NOT NULL DEFAULT '0.00',
  MSRP decimal(10,2) NOT NULL DEFAULT '0.00',
  PRIMARY KEY (PRODUCTCODE),
  KEY IDX_PRODUCT_LINE (PRODUCTLINE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE ORDERFACT (
  ORDERNUMBER int default NULL,
  PRODUCTCODE varchar(15) default NULL,
  QUANTITYORDERED int default NULL,
  PRICEEACH decimal(31,7) default NULL,
  ORDERLINENUMBER int default NULL,
  TOTALPRICE double default NULL,
  ORDERDATE timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  REQUIREDDATE timestamp default CURRENT_TIMESTAMP,
  SHIPPEDDATE timestamp default NULL,
  STATUS varchar(15) default NULL,
  COMMENTS mediumtext,
  CUSTOMERNUMBER int default NULL,
  TIME_ID varchar(10) default NULL,
  QTR_ID bigint default NULL,
  MONTH_ID bigint default NULL,
  YEAR_ID bigint default NULL,
  KEY SYS_FK_1 (PRODUCTCODE),
  CONSTRAINT SYS_FK_1 FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTS (PRODUCTCODE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE ORDERS (
  ORDERNUMBER int NOT NULL,
  ORDERDATE datetime NOT NULL,
  REQUIREDDATE datetime DEFAULT NULL,
  SHIPPEDDATE datetime DEFAULT NULL,
  STATUS varchar(15) NOT NULL,
  COMMENTS text,
  CUSTOMERNUMBER int NOT NULL,
  PRIMARY KEY (ORDERNUMBER),
  KEY IDX_ORDER_CUSTOMER (CUSTOMERNUMBER),
  KEY IDX_ORDER_DATE (ORDERDATE),
  KEY IDX_ORDER_STATUS (STATUS),
  CONSTRAINT fk_orders_customer 
    FOREIGN KEY (CUSTOMERNUMBER) 
    REFERENCES CUSTOMERS (CUSTOMERNUMBER)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE ORDERDETAILS (
  ORDERNUMBER int NOT NULL,
  PRODUCTCODE varchar(15) NOT NULL,
  QUANTITYORDERED int NOT NULL,
  PRICEEACH decimal(10,2) NOT NULL,
  ORDERLINENUMBER smallint NOT NULL,
  PRIMARY KEY (ORDERNUMBER, PRODUCTCODE),
  KEY IDX_ORDERDETAIL_PRODUCT (PRODUCTCODE),
  CONSTRAINT fk_orderdetails_order 
    FOREIGN KEY (ORDERNUMBER) 
    REFERENCES ORDERS (ORDERNUMBER),
  CONSTRAINT fk_orderdetails_product 
    FOREIGN KEY (PRODUCTCODE) 
    REFERENCES PRODUCTS (PRODUCTCODE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE PAYMENTS (
  CUSTOMERNUMBER int NOT NULL,
  CHECKNUMBER varchar(50) NOT NULL,
  PAYMENTDATE datetime NOT NULL,
  AMOUNT decimal(10,2) NOT NULL,
  PRIMARY KEY (CUSTOMERNUMBER, CHECKNUMBER),
  KEY IDX_PAYMENT_DATE (PAYMENTDATE),
  CONSTRAINT fk_payments_customer 
    FOREIGN KEY (CUSTOMERNUMBER) 
    REFERENCES CUSTOMERS (CUSTOMERNUMBER)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Additional tables
CREATE TABLE CUSTOMER_W_TER (
  CUSTOMERNUMBER int DEFAULT NULL,
  CUSTOMERNAME varchar(50) DEFAULT NULL,
  CONTACTLASTNAME varchar(50) DEFAULT NULL,
  CONTACTFIRSTNAME varchar(50) DEFAULT NULL,
  PHONE varchar(50) DEFAULT NULL,
  ADDRESSLINE1 varchar(50) DEFAULT NULL,
  ADDRESSLINE2 varchar(50) DEFAULT NULL,
  CITY varchar(50) DEFAULT NULL,
  STATE varchar(50) DEFAULT NULL,
  POSTALCODE varchar(15) DEFAULT NULL,
  COUNTRY varchar(50) DEFAULT NULL,
  EMPLOYEENUMBER int DEFAULT NULL,
  CREDITLIMIT decimal(10,2) DEFAULT NULL,
  TERRITORY varchar(10) DEFAULT NULL,
  UNIQUE KEY index1 (CUSTOMERNUMBER),
  KEY IDX_EMPLOYEE (EMPLOYEENUMBER),
  CONSTRAINT fk_customer_w_ter_employee 
    FOREIGN KEY (EMPLOYEENUMBER) 
    REFERENCES EMPLOYEES (EMPLOYEENUMBER)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE DIM_TIME (
  TIME_ID varchar(10) DEFAULT NULL,
  MONTH_ID int DEFAULT NULL,
  QTR_ID int DEFAULT NULL,
  YEAR_ID int DEFAULT NULL,
  MONTH_NAME char(3) DEFAULT NULL,
  MONTH_DESC varchar(9) DEFAULT NULL,
  QTR_NAME varchar(4) DEFAULT NULL,
  QTR_DESC varchar(9) DEFAULT NULL,
  KEY IDX_TIME_ID (TIME_ID),
  KEY IDX_YEAR_MONTH (YEAR_ID, MONTH_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE DEPARTMENT_MANAGERS (
  REGION varchar(50) NOT NULL DEFAULT '',
  MANAGER_NAME varchar(50) NOT NULL DEFAULT '',
  EMAIL varchar(50) DEFAULT NULL,
  PRIMARY KEY (REGION, MANAGER_NAME)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE QUADRANT_ACTUALS (
  REGION varchar(50) NOT NULL DEFAULT '',
  DEPARTMENT varchar(50) NOT NULL DEFAULT '',
  POSITIONTITLE varchar(50) NOT NULL DEFAULT '',
  ACTUAL decimal(10,2) DEFAULT NULL,
  BUDGET decimal(10,2) DEFAULT NULL,
  VARIANCE decimal(10,2) AS (IFNULL(BUDGET, 0) - IFNULL(ACTUAL, 0)),
  PRIMARY KEY (REGION, DEPARTMENT, POSITIONTITLE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE TRIAL_BALANCE (
  Type char(1) DEFAULT NULL,
  Account_Num int DEFAULT NULL,
  Category varchar(57) DEFAULT NULL,
  Category2 varchar(57) DEFAULT NULL,
  Detail varchar(57) DEFAULT NULL,
  Amount int DEFAULT NULL,
  KEY IDX_TRIAL_BALANCE (Account_Num, Type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Create views

-- Customer order summary view
CREATE VIEW customer_order_summary AS
SELECT 
  c.CUSTOMERNUMBER,
  c.CUSTOMERNAME,
  COUNT(o.ORDERNUMBER) as total_orders,
  COALESCE(SUM(od.QUANTITYORDERED * od.PRICEEACH), 0) as total_spent,
  MAX(o.ORDERDATE) as last_order_date
FROM CUSTOMERS c
LEFT JOIN ORDERS o ON c.CUSTOMERNUMBER = o.CUSTOMERNUMBER
LEFT JOIN ORDERDETAILS od ON o.ORDERNUMBER = od.ORDERNUMBER
GROUP BY c.CUSTOMERNUMBER, c.CUSTOMERNAME;

-- Product performance view
CREATE VIEW product_performance AS
SELECT
  p.PRODUCTCODE,
  p.PRODUCTNAME,
  p.PRODUCTLINE,
  SUM(od.QUANTITYORDERED) as total_quantity_sold,
  SUM(od.QUANTITYORDERED * od.PRICEEACH) as total_revenue,
  SUM(od.QUANTITYORDERED * (od.PRICEEACH - p.BUYPRICE)) as total_profit,
  COUNT(DISTINCT o.ORDERNUMBER) as order_count,
  p.QUANTITYINSTOCK as current_stock
FROM PRODUCTS p
LEFT JOIN ORDERDETAILS od ON p.PRODUCTCODE = od.PRODUCTCODE
LEFT JOIN ORDERS o ON od.ORDERNUMBER = o.ORDERNUMBER
GROUP BY p.PRODUCTCODE, p.PRODUCTNAME, p.PRODUCTLINE, p.QUANTITYINSTOCK
ORDER BY total_revenue DESC;

-- Employee sales performance view
CREATE VIEW employee_sales_performance AS
SELECT
  e.EMPLOYEENUMBER,
  CONCAT(e.FIRSTNAME, ' ', e.LASTNAME) as employee_name,
  e.JOBTITLE,
  o.OFFICECODE,
  o.CITY,
  o.COUNTRY,
  COUNT(DISTINCT c.CUSTOMERNUMBER) as customer_count,
  COUNT(DISTINCT ord.ORDERNUMBER) as order_count,
  COALESCE(SUM(od.QUANTITYORDERED * od.PRICEEACH), 0) as total_sales
FROM EMPLOYEES e
LEFT JOIN OFFICES o ON e.OFFICECODE = o.OFFICECODE
LEFT JOIN CUSTOMERS c ON e.EMPLOYEENUMBER = c.SALESREPEMPLOYEENUMBER
LEFT JOIN ORDERS ord ON c.CUSTOMERNUMBER = ord.CUSTOMERNUMBER
LEFT JOIN ORDERDETAILS od ON ord.ORDERNUMBER = od.ORDERNUMBER
GROUP BY e.EMPLOYEENUMBER, employee_name, e.JOBTITLE, o.OFFICECODE, o.CITY, o.COUNTRY
ORDER BY total_sales DESC;

-- Monthly sales trend view
CREATE VIEW monthly_sales_trend AS
SELECT
  YEAR(o.ORDERDATE) as order_year,
  MONTH(o.ORDERDATE) as order_month,
  COUNT(DISTINCT o.ORDERNUMBER) as order_count,
  COUNT(DISTINCT o.CUSTOMERNUMBER) as customer_count,
  SUM(od.QUANTITYORDERED * od.PRICEEACH) as monthly_revenue
FROM ORDERS o
JOIN ORDERDETAILS od ON o.ORDERNUMBER = od.ORDERNUMBER
GROUP BY order_year, order_month
ORDER BY order_year, order_month;

-- Product inventory status view
CREATE VIEW product_inventory_status AS
SELECT
  p.PRODUCTCODE,
  p.PRODUCTNAME,
  p.PRODUCTLINE,
  p.QUANTITYINSTOCK,
  p.BUYPRICE,
  p.MSRP,
  (p.QUANTITYINSTOCK * p.BUYPRICE) as inventory_value,
  CASE
    WHEN p.QUANTITYINSTOCK = 0 THEN 'Out of Stock'
    WHEN p.QUANTITYINSTOCK < 10 THEN 'Low Stock'
    WHEN p.QUANTITYINSTOCK < 30 THEN 'Medium Stock'
    ELSE 'Well Stocked'
  END as stock_status
FROM PRODUCTS p
ORDER BY p.PRODUCTLINE, p.PRODUCTNAME;

-- Customer payment history view
CREATE VIEW customer_payment_history AS
SELECT
  c.CUSTOMERNUMBER,
  c.CUSTOMERNAME,
  c.CREDITLIMIT,
  COUNT(p.CHECKNUMBER) as payment_count,
  SUM(p.AMOUNT) as total_payments,
  AVG(p.AMOUNT) as average_payment,
  MAX(p.PAYMENTDATE) as last_payment_date,
  COALESCE(SUM(od.QUANTITYORDERED * od.PRICEEACH), 0) as total_ordered_amount,
  COALESCE(SUM(p.AMOUNT), 0) - COALESCE(SUM(od.QUANTITYORDERED * od.PRICEEACH), 0) as balance
FROM CUSTOMERS c
LEFT JOIN PAYMENTS p ON c.CUSTOMERNUMBER = p.CUSTOMERNUMBER
LEFT JOIN ORDERS o ON c.CUSTOMERNUMBER = o.CUSTOMERNUMBER
LEFT JOIN ORDERDETAILS od ON o.ORDERNUMBER = od.ORDERNUMBER
GROUP BY c.CUSTOMERNUMBER, c.CUSTOMERNAME, c.CREDITLIMIT
ORDER BY c.CUSTOMERNAME;

-- Create stored procedures
DELIMITER //
CREATE PROCEDURE GetCustomerOrders(IN customer_id INT)
BEGIN
  SELECT 
    o.ORDERNUMBER,
    o.ORDERDATE,
    o.STATUS,
    SUM(od.QUANTITYORDERED * od.PRICEEACH) as total_amount
  FROM ORDERS o
  JOIN ORDERDETAILS od ON o.ORDERNUMBER = od.ORDERNUMBER
  WHERE o.CUSTOMERNUMBER = customer_id
  GROUP BY o.ORDERNUMBER, o.ORDERDATE, o.STATUS
  ORDER BY o.ORDERDATE DESC;
END //

CREATE PROCEDURE UpdateProductStock(IN p_product_code VARCHAR(15), IN p_quantity INT)
BEGIN
  UPDATE PRODUCTS
  SET QUANTITYINSTOCK = QUANTITYINSTOCK - p_quantity
  WHERE PRODUCTCODE = p_product_code;
END //

CREATE PROCEDURE GetProductSalesByQuarter(IN p_year INT)
BEGIN
  SELECT
    p.PRODUCTCODE,
    p.PRODUCTNAME,
    p.PRODUCTLINE,
    QUARTER(o.ORDERDATE) as sales_quarter,
    SUM(od.QUANTITYORDERED) as total_quantity,
    SUM(od.QUANTITYORDERED * od.PRICEEACH) as total_sales
  FROM PRODUCTS p
  JOIN ORDERDETAILS od ON p.PRODUCTCODE = od.PRODUCTCODE
  JOIN ORDERS o ON od.ORDERNUMBER = o.ORDERNUMBER
  WHERE YEAR(o.ORDERDATE) = p_year
  GROUP BY p.PRODUCTCODE, p.PRODUCTNAME, p.PRODUCTLINE, sales_quarter
  ORDER BY p.PRODUCTLINE, p.PRODUCTNAME, sales_quarter;
END //

CREATE PROCEDURE GetTopCustomersByRegion(IN p_region VARCHAR(50), IN p_limit INT)
BEGIN
  SELECT
    c.CUSTOMERNUMBER,
    c.CUSTOMERNAME,
    c.COUNTRY,
    COUNT(o.ORDERNUMBER) as order_count,
    SUM(od.QUANTITYORDERED * od.PRICEEACH) as total_spent,
    CONCAT(e.FIRSTNAME, ' ', e.LASTNAME) as sales_rep
  FROM CUSTOMERS c
  JOIN ORDERS o ON c.CUSTOMERNUMBER = o.CUSTOMERNUMBER
  JOIN ORDERDETAILS od ON o.ORDERNUMBER = od.ORDERNUMBER
  LEFT JOIN EMPLOYEES e ON c.SALESREPEMPLOYEENUMBER = e.EMPLOYEENUMBER
  LEFT JOIN OFFICES off ON e.OFFICECODE = off.OFFICECODE
  WHERE off.TERRITORY = p_region
  GROUP BY c.CUSTOMERNUMBER, c.CUSTOMERNAME, c.COUNTRY, sales_rep
  ORDER BY total_spent DESC
  LIMIT p_limit;
END //

CREATE PROCEDURE GetInventoryValueByProductLine()
BEGIN
  SELECT
    p.PRODUCTLINE,
    COUNT(p.PRODUCTCODE) as product_count,
    SUM(p.QUANTITYINSTOCK) as total_quantity,
    SUM(p.QUANTITYINSTOCK * p.BUYPRICE) as inventory_value,
    AVG(p.MSRP - p.BUYPRICE) as avg_margin
  FROM PRODUCTS p
  GROUP BY p.PRODUCTLINE
  ORDER BY inventory_value DESC;
END //

DELIMITER ;

-- Create triggers
DELIMITER //
CREATE TRIGGER before_order_insert 
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
  IF NEW.REQUIREDDATE IS NOT NULL AND NEW.SHIPPEDDATE IS NOT NULL AND 
     NEW.REQUIREDDATE < NEW.SHIPPEDDATE THEN
    SIGNAL SQLSTATE '45000' 
    SET MESSAGE_TEXT = 'Required date must be on or after shipped date';
  END IF;
END //

CREATE TRIGGER before_payment_insert
BEFORE INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
  IF NEW.AMOUNT <= 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Payment amount must be positive';
  END IF;
END //

DELIMITER ;

-- Create event for maintenance
CREATE EVENT IF NOT EXISTS daily_maintenance
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
BEGIN
  -- Example maintenance task (commented out for safety)
  -- CREATE TABLE IF NOT EXISTS orders_archive LIKE ORDERS;
  -- INSERT INTO orders_archive 
  -- SELECT * FROM ORDERS 
  -- WHERE STATUS = 'Shipped' 
  -- AND SHIPPEDDATE < DATE_SUB(NOW(), INTERVAL 1 YEAR);
END;

-- Enable event scheduler
SET GLOBAL event_scheduler = ON;

-- Add table and column comments
ALTER TABLE CUSTOMERS COMMENT 'Stores customer information';
ALTER TABLE CUSTOMERS 
  MODIFY COLUMN CUSTOMERNUMBER int COMMENT 'Unique identifier for customers',
  MODIFY COLUMN CUSTOMERNAME varchar(50) COMMENT 'Name of the customer',
  MODIFY COLUMN CREDITLIMIT decimal(10,2) COMMENT 'Maximum credit allowed for the customer';

-- Add indexes for better performance
CREATE INDEX idx_customers_country ON CUSTOMERS(COUNTRY);
CREATE INDEX idx_orders_status ON ORDERS(STATUS);
CREATE INDEX idx_orderdetails_ordernumber ON ORDERDETAILS(ORDERNUMBER);
CREATE INDEX idx_payments_customernumber ON PAYMENTS(CUSTOMERNUMBER);
